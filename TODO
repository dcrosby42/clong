Refactoring ideas:

- Define game states as maps { :in :update :out }




Features:

- Light randomization of initial ball launch
- Light randomization of explosions
- Effect on paddle strike
- Effect on wall strike
- Effect on goal strike
/ Make lasers do something to ball
/ Fire lasers from paddles
/ Make lasers do something to enemy paddle
/ Delay ball instantiation and launch until Enter
/ Deflect off ceiling and floor
/ Count score when goal is struck
/ Display score counter
/ Pause on space

Tech:
- Bring "graph" plumbing library in

Smells:
- UGH: fire laser
  Firing control knowledge is hiding inside update-paddle, but that function returns a paddle.  
  OPTION 1: set temp state on the paddle, indicating a laser should be fired, and rely on a subsequent function to:
    - detect the laser
    - add it to the appropriate lasers list in the game state
    - clear that temp state out of the paddle.
    X nasty?  This requires, eg, update-state-playing to weave a pipeline of paddle mods in its let statement.
    WENT WITH THIS OPTION
  
  OPTION 2: let something else detect the firing
    - DON'T do the detection / laser creation in update-paddle
    x ergh... the extraction of controls would be repeated outside the update-paddle func somewhere polluting.

  OPTION 3: update-paddle (and other similar funcs) return an updated target + side effects

- UGH! Laser / paddle collision detection and handling
  Lots of intertwined knowledge
  Had to update lots of other code (such as update-paddle) to accomodate the slow-down effect

- Paused and Ready state repeat the update-mode logic
- Paused/playing/ready updaters all call the same update-mode function, which then branches internally on state
  -> seems like there could be a more cause-effect relationship
- controller-mapping is a global valuer referenced from several tier2 update functions 

